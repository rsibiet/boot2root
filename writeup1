[ ******************** LMEZARD ********************* ]

#-------------- Etape 1 --------------
#Download de l'image sur un debian
wget http://dl.42.fr/BornToSecHackMe-v1.1.iso

#Montage de l'iso
mount -o loop ./BornToSecHackMe-v1.1.iso /mnt/iso

#root@ns334883:/mnt/iso/casper# ls -lh
#total 407M
#-r--r--r-- 1 root root  15K Jun 17 00:36 filesystem.manifest
#-r--r--r-- 1 root root  15K Jun 17 00:36 filesystem.manifest-desktop
#-r--r--r-- 1 root root   11 Jun 17 00:39 filesystem.size
#-r--r--r-- 1 root root 386M Jun 17 00:39 filesystem.squashfs  #<----------
#-r--r--r-- 1 root root  17M Jun 17 00:36 initrd.gz
#-r--r--r-- 1 root root  201 Jun 17 00:36 README.diskdefines
#-r--r--r-- 1 root root 4.9M Jun 17 00:36 vmlinuz


#Reperage du fichier filesystem.sqashfs
#https://fr.wikipedia.org/wiki/SquashFS
#
#Il contient toute l'arborescence de l'OS

#recuperation du soft pour extraire les fichiers
apt-get install squashfs-tools

#extraction
unsquashfs -f -d /home/boot2root/fsboot2root /nmt/iso/capser/filesystem.suqshfs

#WOW un dossier LOOKATME dans le Home
#root@ns334883:/home/boot2root/fsboot2root/home# ls -l
#total 28
#drwxr-x--- 6 boot2root boot2root 4096 Nov  9 10:57 ft_root
#drwxr-x--- 3 boot2root boot2root 4096 Nov  9 11:10 laurie
#drwxr-x--- 4 boot2root boot2root 4096 Nov  8 09:08 laurie@borntosec.net
#drwxrwxrwx 3 boot2root boot2root 4096 Nov  8 09:11 lmezard
#drwxr-x--- 2 boot2root boot2root 4096 Nov  8 09:07 LOOKATME #<-----------
#drwxr-x--- 3 boot2root boot2root 4096 Nov  9 11:10 thor
#drwxr-x--- 4 boot2root boot2root 4096 Nov  8 09:12 zaz

#dans LOOKATME un fichier password
/home/boot2root/fsboot2root/home/LOOKATME# cat password
lmezard:G!@M6f4Eatau{sF"

#Acce a l'utilisateur lmezard


home/lmezard$ file fun
#fun: POSIX tar archive (GNU)
lmezard:~/$ tar xvf fun

Extraction d'une archive de 750 fichiers pcap
Semble contenir un main.c split dans un ordre random

Ecriture d'un script nodejs pour trier et remettre les fichiers dans l'ordre: pcap.js

==============================
node pcap.js
./main.c file was saved!
Exec : gcc main.c && ./a.out

Lancement de l'executable

MY PASSWORD IS: Iheartpwnage
Now SHA-256 it and submit
=============================
Mot de passe de laurie:
Iheartpwnage ==SHA-256==> 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4


[ ******************** LAURIE ********************* ]

step1:
	 0x08048b20 <+0>:	push   %ebp
  	 0x08048b21 <+1>:	mov    %esp,%ebp
  	 0x08048b23 <+3>:	sub    $0x8,%esp
	 0x08048b26 <+6>:	mov    0x8(%ebp),%eax
  	 0x08048b29 <+9>:	add    $0xfffffff8,%esp
  	 0x08048b2c <+12>:	push   $0x80497c0
  	 0x08048b31 <+17>:	push   %eax
  	 0x08048b32 <+18>:	call   0x8049030 <strings_not_equal>
  	 0x08048b37 <+23>:	add    $0x10,%esp
	 0x08048b3a <+26>:	test   %eax,%eax
 	 0x08048b3c <+28>:	je     0x8048b43 <phase_1+35>
 	 0x08048b3e <+30>:	call   0x80494fc <explode_bomb>
  	 0x08048b43 <+35>:	mov    %ebp,%esp
  	 0x08048b45 <+37>:	pop    %ebp
  	 0x08048b46 <+38>:	ret
Line 18 il verifie que la chaine entree correspond bien a celle stocker en 0x80497c0.
Il suffit d'afficher cette chaine `/x/s 0x80497c0` et de l'utiliser en entree afin de
ne pas faire exploser la bombe.

step2:
	0x08048b48 <+0>:	push   %ebp
	0x08048b49 <+1>:	mov    %esp,%ebp
   	0x08048b4b <+3>:	sub    $0x20,%esp
 	0x08048b4e <+6>:	push   %esi
   	0x08048b4f <+7>:	push   %ebx
	0x08048b50 <+8>:	mov    0x8(%ebp),%edx
	0x08048b53 <+11>:	add    $0xfffffff8,%esp
	0x08048b56 <+14>:	lea    -0x18(%ebp),%eax
	0x08048b59 <+17>:	push   %eax
	0x08048b5a <+18>:	push   %edx
	0x08048b5b <+19>:	call   0x8048fd8 <read_six_numbers>
	0x08048b60 <+24>:	add    $0x10,%esp
	0x08048b63 <+27>:	cmpl   $0x1,-0x18(%ebp)
	0x08048b67 <+31>:	je     0x8048b6e <phase_2+38>
	0x08048b69 <+33>:	call   0x80494fc <explode_bomb>
	0x08048b6e <+38>:	mov    $0x1,%ebx
	0x08048b73 <+43>:	lea    -0x18(%ebp),%esi
	0x08048b76 <+46>:	lea    0x1(%ebx),%eax
	0x08048b79 <+49>:	imul   -0x4(%esi,%ebx,4),%eax
	0x08048b7e <+54>:	cmp    %eax,(%esi,%ebx,4)
	0x08048b81 <+57>:	je     0x8048b88 <phase_2+64>
	0x08048b83 <+59>:	call   0x80494fc <explode_bomb>
	0x08048b88 <+64>:	inc    %ebx
	0x08048b89 <+65>:	cmp    $0x5,%ebx
	0x08048b8c <+68>:	jle    0x8048b76 <phase_2+46>
	0x08048b8e <+70>:	lea    -0x28(%ebp),%esp
	0x08048b91 <+73>:	pop    %ebx
	0x08048b92 <+74>:	pop    %esi
	0x08048b93 <+75>:	mov    %ebp,%esp
	0x08048b95 <+77>:	pop    %ebp
	0x08048b96 <+78>:	ret
On peut facilement voir que la nouvelle entree necessitera 6 nombres. a la line 38 il verifie que le premier
nombre entree est bien egale a 1.
Ensuite c'est tout betement une boucle avec une comparaison entre les nombres entree et 1 multiplier par 2
puis le resultat multiplier par 3, puis le resultat multiplier par 4 etc jusqu'a 6. On obtient donc:
1 2 6 24 120 720

step3:
	0x08048b98 <+0>:	push   %ebp
   	0x08048b99 <+1>:	mov    %esp,%ebp
  	0x08048b9b <+3>:	sub    $0x14,%esp
	0x08048b9e <+6>:	push   %ebx
	0x08048b9f <+7>:	mov    0x8(%ebp),%edx
  	0x08048ba2 <+10>:	add    $0xfffffff4,%esp
   	0x08048ba5 <+13>:	lea    -0x4(%ebp),%eax
   	0x08048ba8 <+16>:	push   %eax
  	0x08048ba9 <+17>:	lea    -0x5(%ebp),%eax
   	0x08048bac <+20>:	push   %eax
   	0x08048bad <+21>:	lea    -0xc(%ebp),%eax
   	0x08048bb0 <+24>:	push   %eax
   	0x08048bb1 <+25>:	push   $0x80497de
   	0x08048bb6 <+30>:	push   %edx
   	0x08048bb7 <+31>:	call   0x8048860 <sscanf@plt>
   	0x08048bbc <+36>:	add    $0x20,%esp
  	0x08048bbf <+39>:	cmp    $0x2,%eax
   	0x08048bc2 <+42>:	jg     0x8048bc9 <phase_3+49>
   	0x08048bc4 <+44>:	call   0x80494fc <explode_bomb>
   	0x08048bc9 <+49>:	cmpl   $0x7,-0xc(%ebp)
   	0x08048bcd <+53>:	ja     0x8048c88 <phase_3+240>
   	0x08048bd3 <+59>:	mov    -0xc(%ebp),%eax
   	0x08048bd6 <+62>:	jmp    *0x80497e8(,%eax,4)
   	0x08048bdd <+69>:	lea    0x0(%esi),%esi
   	0x08048be0 <+72>:	mov    $0x71,%bl
   	0x08048be2 <+74>:	cmpl   $0x309,-0x4(%ebp)
   	0x08048be9 <+81>:	je     0x8048c8f <phase_3+247>
   	0x08048bef <+87>:	call   0x80494fc <explode_bomb>
   	0x08048bf4 <+92>:	jmp    0x8048c8f <phase_3+247>
   	0x08048bf9 <+97>:	lea    0x0(%esi,%eiz,1),%esi
   	0x08048c00 <+104>:	mov    $0x62,%bl
   	0x08048c02 <+106>:	cmpl   $0xd6,-0x4(%ebp)
   	0x08048c09 <+113>:	je     0x8048c8f <phase_3+247>
   	0x08048c0f <+119>:	call   0x80494fc <explode_bomb>
   	0x08048c14 <+124>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c16 <+126>:	mov    $0x62,%bl
   	0x08048c18 <+128>:	cmpl   $0x2f3,-0x4(%ebp)
   	0x08048c1f <+135>:	je     0x8048c8f <phase_3+247>
   	0x08048c21 <+137>:	call   0x80494fc <explode_bomb>
   	0x08048c26 <+142>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c28 <+144>:	mov    $0x6b,%bl
   	0x08048c2a <+146>:	cmpl   $0xfb,-0x4(%ebp)
   	0x08048c31 <+153>:	je     0x8048c8f <phase_3+247>
   	0x08048c33 <+155>:	call   0x80494fc <explode_bomb>
   	0x08048c38 <+160>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c3a <+162>:	lea    0x0(%esi),%esi
   	0x08048c40 <+168>:	mov    $0x6f,%bl
   	0x08048c42 <+170>:	cmpl   $0xa0,-0x4(%ebp)
   	0x08048c49 <+177>:	je     0x8048c8f <phase_3+247>
   	0x08048c4b <+179>:	call   0x80494fc <explode_bomb>
   	0x08048c50 <+184>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c52 <+186>:	mov    $0x74,%bl
   	0x08048c54 <+188>:	cmpl   $0x1ca,-0x4(%ebp)
   	0x08048c5b <+195>:	je     0x8048c8f <phase_3+247>
   	0x08048c5d <+197>:	call   0x80494fc <explode_bomb>
   	0x08048c62 <+202>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c64 <+204>:	mov    $0x76,%bl
   	0x08048c66 <+206>:	cmpl   $0x30c,-0x4(%ebp)
   	0x08048c6d <+213>:	je     0x8048c8f <phase_3+247>
   	0x08048c6f <+215>:	call   0x80494fc <explode_bomb>
   	0x08048c74 <+220>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c76 <+222>:	mov    $0x62,%bl
   	0x08048c78 <+224>:	cmpl   $0x20c,-0x4(%ebp)
   	0x08048c7f <+231>:	je     0x8048c8f <phase_3+247>
   	0x08048c81 <+233>:	call   0x80494fc <explode_bomb>
   	0x08048c86 <+238>:	jmp    0x8048c8f <phase_3+247>
   	0x08048c88 <+240>:	mov    $0x78,%bl
   	0x08048c8a <+242>:	call   0x80494fc <explode_bomb>
   	0x08048c8f <+247>:	cmp    -0x5(%ebp),%bl
   	0x08048c92 <+250>:	je     0x8048c99 <phase_3+257>
   	0x08048c94 <+252>:	call   0x80494fc <explode_bomb>
   	0x08048c99 <+257>:	mov    -0x18(%ebp),%ebx
   	0x08048c9c <+260>:	mov    %ebp,%esp
   	0x08048c9e <+262>:	pop    %ebp
   	0x08048c9f <+263>:	ret
Bon, la ca parait compliquer mais en fait c'est tout bete. Il verifie d'abord qu'on a bien entree un nombre
puis un caractere puis un nombre grace a l'affichage de cette adresse 0x80497de "%d %c %d".
Ensuite il verifie que le premier nombre n'est pas superieur a 7. sinon il n'entre pas dans le switch case.
Si oui il va comparer dans le switch case correspondant au premier nombre entree si on a bien mis le caractere
et le nombre stocker dans la case. Si ca ne correspond pas la bombe explose.
La plusieurs possibilites sont offertes. mais basiquement: compare le nombre avec 0xd6: cmpl	$0xd6,-0x4(%ebp)
puis compare le charactere: cmp	bl,BYTE PTR [ebp-0x5]

step4:
	0x08048ce0 <+0>:	push   ebp
   	0x08048ce1 <+1>:	mov    ebp,esp
   	0x08048ce3 <+3>:	sub    esp,0x18
	0x08048ce6 <+6>:	mov    edx,DWORD PTR [ebp+0x8]
   	0x08048ce9 <+9>:	add    esp,0xfffffffc
   	0x08048cec <+12>:	lea    eax,[ebp-0x4]
   	0x08048cef <+15>:	push   eax
   	0x08048cf0 <+16>:	push   0x8049808
   	0x08048cf5 <+21>:	push   edx
   	0x08048cf6 <+22>:	call   0x8048860 <sscanf@plt>
  	0x08048cfb <+27>:	add    esp,0x10
  	0x08048cfe <+30>:	cmp    eax,0x1
   	0x08048d01 <+33>:	jne    0x8048d09 <phase_4+41>
   	0x08048d03 <+35>:	cmp    DWORD PTR [ebp-0x4],0x0
   	0x08048d07 <+39>:	jg     0x8048d0e <phase_4+46>
   	0x08048d09 <+41>:	call   0x80494fc <explode_bomb>
   	0x08048d0e <+46>:	add    esp,0xfffffff4
   	0x08048d11 <+49>:	mov    eax,DWORD PTR [ebp-0x4]
   	0x08048d14 <+52>:	push   eax
   	0x08048d15 <+53>:	call   0x8048ca0 <func4>
   	0x08048d1a <+58>:	add    esp,0x10
   	0x08048d1d <+61>:	cmp    eax,0x37
   	0x08048d20 <+64>:	je     0x8048d27 <phase_4+71>
   	0x08048d22 <+66>:	call   0x80494fc <explode_bomb>
   	0x08048d27 <+71>:	mov    esp,ebp
   	0x08048d29 <+73>:	pop    ebp
   	0x08048d2a <+74>:	ret
La tout betement il verifie qu'on a bien entree un unique nombre et qu'il est superieur a zero.
Ensuite il appel la fonction4. Je n'ai pas vraiment etudier cette fonction mais j'ai surtout analyse la sortie
ou ensuite il compare le nombre modifier par la fonction 4 avec 0x37 (55).
Il m'a suffit de retenter avec quelques chiffres pour avoir le bon. 9 :)

step5:
	0x08048d2c <+0>:	push   ebp
   	0x08048d2d <+1>:	mov    ebp,esp
   	0x08048d2f <+3>:	sub    esp,0x10
   	0x08048d32 <+6>:	push   esi
   	0x08048d33 <+7>:	push   ebx
	0x08048d34 <+8>:	mov    ebx,DWORD PTR [ebp+0x8]
   	0x08048d37 <+11>:	add    esp,0xfffffff4
   	0x08048d3a <+14>:	push   ebx
   	0x08048d3b <+15>:	call   0x8049018 <string_length>
   	0x08048d40 <+20>:	add    esp,0x10
  	0x08048d43 <+23>:	cmp    eax,0x6
   	0x08048d46 <+26>:	je     0x8048d4d <phase_5+33>
   	0x08048d48 <+28>:	call   0x80494fc <explode_bomb>
   	0x08048d4d <+33>:	xor    edx,edx
   	0x08048d4f <+35>:	lea    ecx,[ebp-0x8]
   	0x08048d52 <+38>:	mov    esi,0x804b220
   	0x08048d57 <+43>:	mov    al,BYTE PTR [edx+ebx*1]
   	0x08048d5a <+46>:	and    al,0xf
   	0x08048d5c <+48>:	movsx  eax,al
   	0x08048d5f <+51>:	mov    al,BYTE PTR [eax+esi*1]
   	0x08048d62 <+54>:	mov    BYTE PTR [edx+ecx*1],al
   	0x08048d65 <+57>:	inc    edx
   	0x08048d66 <+58>:	cmp    edx,0x5
   	0x08048d69 <+61>:	jle    0x8048d57 <phase_5+43>
   	0x08048d6b <+63>:	mov    BYTE PTR [ebp-0x2],0x0
   	0x08048d6f <+67>:	add    esp,0xfffffff8
   	0x08048d72 <+70>:	push   0x804980b
   	0x08048d77 <+75>:	lea    eax,[ebp-0x8]
   	0x08048d7a <+78>:	push   eax
   	0x08048d7b <+79>:	call   0x8049030 <strings_not_equal>
   	0x08048d80 <+84>:	add    esp,0x10
   	0x08048d83 <+87>:	test   eax,eax
   	0x08048d85 <+89>:	je     0x8048d8c <phase_5+96>
   	0x08048d87 <+91>:	call   0x80494fc <explode_bomb>
   	0x08048d8c <+96>:	lea    esp,[ebp-0x18]
   	0x08048d8f <+99>:	pop    ebx
   	0x08048d90 <+100>:	pop    esi
   	0x08048d91 <+101>:	mov    esp,ebp
   	0x08048d93 <+103>:	pop    ebp
   	0x08048d94 <+104>:	ret
La c'et un peu tricky a comprendre. Mais il attends une string de 6 caracteres. Modifie cette string et la
compare avec la string `giants`. On peut voir qu'un tableau est
stocker a l'adresse 0x804b220. En fait il fait un & binaire avec 0xf et recupere
le resultat pour aller piocher dans le tableau[16] le caractere de remplacement.
Faut se debrouiller pour envoyer des characteres qui creeront le mot
`giants`.

step6:
	0x08048d98 <+0>:    push   ebp
   	0x08048d99 <+1>:    mov    ebp,esp
   	0x08048d9b <+3>:    sub    esp,0x4c
 	0x08048d9e <+6>:    push   edi
   	0x08048d9f <+7>:    push   esi
   	0x08048da0 <+8>:    push   ebx
 	0x08048da1 <+9>:    mov    edx,DWORD PTR [ebp+0x8]
   	0x08048da4 <+12>:    mov    DWORD PTR [ebp-0x34],0x804b26c
   	0x08048dab <+19>:    add    esp,0xfffffff8
	0x08048dae <+22>:    lea    eax,[ebp-0x18]
   	0x08048db1 <+25>:    push   eax
   	0x08048db2 <+26>:    push   edx
   	0x08048db3 <+27>:    call   0x8048fd8 <read_six_numbers>
   	0x08048db8 <+32>:    xor    edi,edi
   	0x08048dba <+34>:    add    esp,0x10
   	0x08048dbd <+37>:    lea    esi,[esi+0x0]
   	0x08048dc0 <+40>:    lea    eax,[ebp-0x18]
   	0x08048dc3 <+43>:    mov    eax,DWORD PTR [eax+edi*4]
   	0x08048dc6 <+46>:    dec    eax
   	0x08048dc7 <+47>:    cmp    eax,0x5
  	0x08048dca <+50>:    jbe    0x8048dd1 <phase_6+57>
   	0x08048dcc <+52>:    call   0x80494fc <explode_bomb>
   	0x08048dd1 <+57>:    lea    ebx,[edi+0x1]
   	0x08048dd4 <+60>:    cmp    ebx,0x5
   	0x08048dd7 <+63>:    jg     0x8048dfc <phase_6+100>
   	0x08048dd9 <+65>:    lea    eax,[edi*4+0x0]
   	0x08048de0 <+72>:    mov    DWORD PTR [ebp-0x38],eax
   	0x08048de3 <+75>:    lea    esi,[ebp-0x18]
   	0x08048de6 <+78>:    mov    edx,DWORD PTR [ebp-0x38]
   	0x08048de9 <+81>:    mov    eax,DWORD PTR [edx+esi*1]
   	0x08048dec <+84>:    cmp    eax,DWORD PTR [esi+ebx*4]
   	0x08048def <+87>:    jne    0x8048df6 <phase_6+94>
   	0x08048df1 <+89>:    call   0x80494fc <explode_bomb>
  	0x08048df6 <+94>:    inc    ebx
   	0x08048df7 <+95>:    cmp    ebx,0x5
   	0x08048dfa <+98>:    jle    0x8048de6 <phase_6+78>
   	0x08048dfc <+100>:    inc    edi
  	0x08048dfd <+101>:    cmp    edi,0x5
   	0x08048e00 <+104>:    jle    0x8048dc0 <phase_6+40>
   	0x08048e02 <+106>:    xor    edi,edi
   	0x08048e04 <+108>:    lea    ecx,[ebp-0x18]
   	0x08048e07 <+111>:    lea    eax,[ebp-0x30]
   	0x08048e0a <+114>:    mov    DWORD PTR [ebp-0x3c],eax
   	0x08048e0d <+117>:    lea    esi,[esi+0x0]
   	0x08048e10 <+120>:    mov    esi,DWORD PTR [ebp-0x34]
   	0x08048e13 <+123>:    mov    ebx,0x1
   	0x08048e18 <+128>:    lea    eax,[edi*4+0x0]
   	0x08048e1f <+135>:    mov    edx,eax
   	0x08048e21 <+137>:    cmp    ebx,DWORD PTR [eax+ecx*1]
   	0x08048e24 <+140>:    jge    0x8048e38 <phase_6+160>
   	0x08048e26 <+142>:    mov    eax,DWORD PTR [edx+ecx*1]
   	0x08048e29 <+145>:    lea    esi,[esi+eiz*1+0x0]
   	0x08048e30 <+152>:    mov    esi,DWORD PTR [esi+0x8]
   	0x08048e33 <+155>:    inc    ebx
   	0x08048e34 <+156>:    cmp    ebx,eax
   	0x08048e36 <+158>:    jl     0x8048e30 <phase_6+152>
   	0x08048e38 <+160>:    mov    edx,DWORD PTR [ebp-0x3c]
   	0x08048e3b <+163>:    mov    DWORD PTR [edx+edi*4],esi
   	0x08048e3e <+166>:    inc    edi
   	0x08048e3f <+167>:    cmp    edi,0x5
   	0x08048e42 <+170>:    jle    0x8048e10 <phase_6+120>
   	0x08048e44 <+172>:    mov    esi,DWORD PTR [ebp-0x30]
   	0x08048e47 <+175>:    mov    DWORD PTR [ebp-0x34],esi
   	0x08048e4a <+178>:    mov    edi,0x1
   	0x08048e4f <+183>:    lea    edx,[ebp-0x30]
   	0x08048e52 <+186>:    mov    eax,DWORD PTR [edx+edi*4]
   	0x08048e55 <+189>:    mov    DWORD PTR [esi+0x8],eax
   	0x08048e58 <+192>:    mov    esi,eax
   	0x08048e5a <+194>:    inc    edi
   	0x08048e5b <+195>:    cmp    edi,0x5
   	0x08048e5e <+198>:    jle    0x8048e52 <phase_6+186>
   	0x08048e60 <+200>:    mov    DWORD PTR [esi+0x8],0x0
   	0x08048e67 <+207>:    mov    esi,DWORD PTR [ebp-0x34]
   	0x08048e6a <+210>:    xor    edi,edi
   	0x08048e6c <+212>:    lea    esi,[esi+eiz*1+0x0]
   	0x08048e70 <+216>:    mov    edx,DWORD PTR [esi+0x8]
   	0x08048e73 <+219>:    mov    eax,DWORD PTR [esi]
   	0x08048e75 <+221>:    cmp    eax,DWORD PTR [edx]
   	0x08048e77 <+223>:    jge    0x8048e7e <phase_6+230>
   	0x08048e79 <+225>:    call   0x80494fc <explode_bomb>
   	0x08048e7e <+230>:    mov    esi,DWORD PTR [esi+0x8]
   	0x08048e81 <+233>:    inc    edi
  	0x08048e82 <+234>:    cmp    edi,0x4
   	0x08048e85 <+237>:    jle    0x8048e70 <phase_6+216>
   	0x08048e87 <+239>:    lea    esp,[ebp-0x58]
   	0x08048e8a <+242>:    pop    ebx
   	0x08048e8b <+243>:    pop    esi
   	0x08048e8c <+244>:    pop    edi
   	0x08048e8d <+245>:    mov    esp,ebp
   	0x08048e8f <+247>:    pop    ebp
   	0x08048e90 <+248>:    ret


La il lit 6 nombres et verifie que le chacun d'entre eux n'est
pas superieur a 6.
Ensuite il verifie que chacun d'entre eux n'est pas egal a ceux qui le suivent.
Puis il verifie avec un tableau que la valeur de node[nb] n'est pas superieur a node + 1.
en gros  il faut donner les indices dans l'ordre de facon a ne pas avoir un node + 1 superieur a un node.

puis en concatenant tout les  mdp on obtiens:

Publicspeakingisveryeasy.126241207201b2149opekmq426315

mais pour l'acces ssh il faut

Publicspeakingisveryeasy.126241207201b2149opekmq426135


[ ******************** THOR ********************* ]

Objectif: decoder le fichier "turtle":

Il suffit de tracer une ligne suivant les directions decrites:

------------ Lettre 1 ------------

Tourne gauche de 90 degrees
Avance 50 spaces

ligne 3 a 363:
{
	Avance 1 spaces
	Tourne gauche de 1 degrees
}
= * 180

ligne 364 a 722:
{
	Tourne droite de 1 degrees
	Avance 1 spaces
}
= * 179

Tourne droite de 1 degrees
Avance 50 spaces

===> On obtient la lettre "S"


------------ Lettre 2 ------------

Avance 210 spaces
Recule 210 spaces
Tourne droite de 90 degrees
Avance 120 spaces

===> On obtient la lettre "L"


------------ Lettre 3 ------------

Tourne droite de 10 degrees
Avance 200 spaces
Tourne droite de 150 degrees
Avance 200 spaces
Recule 100 spaces
Tourne droite de 120 degrees
Avance 50 spaces

===> On obtient la lettre "A"


------------ Lettre 4 ------------

Tourne gauche de 90 degrees
Avance 50 spaces

ligne 740 a 1100:
{
	Avance 1 spaces
	Tourne gauche de 1 degrees
}
= * 180

ligne 1101 a 1459:
{
	Avance 1 spaces
	Tourne droite de 1 degrees
}
= * 180
Avance 50 spaces

===> On obtient la lettre "S"


------------ Lettre 5 ------------

Avance 100 spaces
Recule 200 spaces
Avance 100 spaces
Tourne droite de 90 degrees
Avance 100 spaces
Tourne droite de 90 degrees
Avance 100 spaces
Recule 200 spaces

===> On obtient la lettre "H"


------------ MOT OBTENU ------------

SLASH

On encrypte ce mot en md5. On obtient le mot de passe de zaz:
646da671ca01bb5d84dbb5fb2238dc8e
=======

[ ******************** ZAZ ********************* ]

Utilisation de gdp-peda recommandé (possible telechargement en soutenance)
lien: https://github.com/longld/peda

asm:
	0x080483f4 <+0>:	push   ebp
   	0x080483f5 <+1>:	mov    ebp,esp
   	0x080483f7 <+3>:	and    esp,0xfffffff0
   	0x080483fa <+6>:	sub    esp,0x90
   	0x08048400 <+12>:	cmp    DWORD PTR [ebp+0x8],0x1
   	0x08048404 <+16>:	jg     0x804840d <main+25>
   	0x08048406 <+18>:	mov    eax,0x1
  	0x0804840b <+23>:	jmp    0x8048436 <main+66>
   	0x0804840d <+25>:	mov    eax,DWORD PTR [ebp+0xc]
   	0x08048410 <+28>:	add    eax,0x4
   	0x08048413 <+31>:	mov    eax,DWORD PTR [eax]
   	0x08048415 <+33>:	mov    DWORD PTR [esp+0x4],eax
   	0x08048419 <+37>:	lea    eax,[esp+0x10]
   	0x0804841d <+41>:	mov    DWORD PTR [esp],eax
   	0x08048420 <+44>:	call   0x8048300 <strcpy@plt>
   	0x08048425 <+49>:	lea    eax,[esp+0x10]
   	0x08048429 <+53>:	mov    DWORD PTR [esp],eax
   	0x0804842c <+56>:	call   0x8048310 <puts@plt>
   	0x08048431 <+61>:	mov    eax,0x0
   	0x08048436 <+66>:	leave
   	0x08048437 <+67>:	ret

Facile ici, c'est un basique strcpy de argv[1] et un puts du retour.
Plutot que d'utiliser un shellcode j'ai preferer un bon vieux ret2libc.
donc on a un tableau qui commence a esp+0x10 et l'eip stocher 140 bytes plus loin.
donc a partir de 140 on peut facilement ecraser l'eip avec l'adresse de system().
Lui ajouter l'adresse de exit() suivit de
"/bin/sh" qu'on aura trouve dans la memoire virtuelle du programme en cours d'execution.
Ainsi vu que le binaire a un bit setuid root ca nous donne un shell tout neuf avec l'id root :) FIN.
